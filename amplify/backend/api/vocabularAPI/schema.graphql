type UserProfile
  @model
  @aws_cognito_user_pools
  @aws_api_key
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: public, provider: apiKey }
    ]
  )
  @key(
    name: "byEmail"
    fields: ["email", "id"]
    queryField: "userProfileByEmail"
  ) {
  id: ID!
  owner: String
  userTag: String!
  email: AWSEmail!
  phrases: [Phrase]! @connection(keyName: "byUser", fields: ["id"])
  wordsBookmarked: AWSJSON!
  wordsArchived: AWSJSON!
}

type Phrase
  @model
  @aws_cognito_user_pools
  @aws_api_key
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: public, provider: apiKey }
    ]
  )
  @key(name: "byUser", fields: ["authorId"])
  @key(
    name: "phrasesByUser"
    fields: ["authorId", "createdAt"]
    queryField: "phrasesByUser"
  )
  @key(
    name: "phrasesByDate"
    fields: ["word", "createdAt"]
    queryField: "phrasesByDate"
  )
  @key(
    name: "phrasesByLikes"
    fields: ["type", "numLikes"]
    queryField: "phrasesByLikes"
  ) {
  id: ID!
  word: String!
  phrase: String!
  numLikes: Int!
  likes: AWSJSON!
  authorId: ID!
  author: UserProfile @connection(fields: ["authorId"])
  isPublic: Boolean!
  createdAt: AWSDateTime!
  type: String!
}

# type Mutation {
#   syncData(userId: ID, words: AWSJSON, archived: AWSJSON): SyncDataResponse
#     @function(name: "syncDataFunction-${env}")
# }

# type SyncDataResponse {
#   userProfile: AWSJSON
#   body: String
# }
