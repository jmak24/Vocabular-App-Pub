type UserProfile
  @model
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner }])
  @key(
    name: "byEmail"
    fields: ["email", "id"]
    queryField: "userProfileByEmail"
  ) {
  id: ID!
  owner: String
  userTag: String!
  email: AWSEmail!
  phrases: [Phrase]! @connection(keyName: "byUser", fields: ["id"])
  bookmarkedWords: AWSJSON!
  archivedWords: AWSJSON!
}

type Phrase
  @model
  @aws_cognito_user_pools
  @auth(rules: [{ allow: owner, operations: [create, delete, update] }])
  @key(name: "byUser", fields: ["authorId"])
  @key(
    name: "phrasesByUser"
    fields: ["authorId", "createdAt"]
    queryField: "phrasesByUser"
  )
  @key(
    name: "phrasesByDate"
    fields: ["word", "createdAt"]
    queryField: "phrasesByDate"
  )
  @key(
    name: "phrasesByLikes"
    fields: ["type", "numLikes"]
    queryField: "phrasesByLikes"
  ) {
  id: ID!
  word: String!
  phrase: String!
  numLikes: Int!
  likes: AWSJSON!
  authorId: ID!
  author: UserProfile @connection(fields: ["authorId"])
  isPublic: Boolean!
  createdAt: AWSDateTime!
  type: String!
}
